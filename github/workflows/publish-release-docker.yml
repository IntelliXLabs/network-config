name: Publish Release From Docker

on:
  push:
    tags:
      - 'v*.*.*'

concurrency:
  group: publish-release
  cancel-in-progress: false

jobs:
  check-branch:
    runs-on: ubuntu-latest
    outputs:
      tag_version: ${{ steps.get-tag.outputs.TAG_VERSION }}
    steps:
      - name: Get Tag Version
        id: get-tag
        run: |
          TAG_VERSION="${GITHUB_REF#refs/tags/}"
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_ENV
          echo "Tag version is: $TAG_VERSION"
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_OUTPUT

  publish-release:
    permissions:
      id-token: write
      contents: write
      attestations: write
    if: inputs.skip_release != true 
    needs: [check-branch]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    environment: release
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          tags: true

      - name: Set Version from Tag
        run: |
          echo "GITHUB_TAG_VERSION=${{ needs.check-branch.outputs.tag_version }}" >> "${GITHUB_ENV}"
          echo "GORELEASER_CURRENT_TAG=${{ needs.check-branch.outputs.tag_version }}" >> "${GITHUB_ENV}"
          echo "Using tag version: ${{ needs.check-branch.outputs.tag_version }}"

      - name: Print Version Info
        run: |
          echo "GORELEASER_CURRENT_TAG=${GORELEASER_CURRENT_TAG}"
          if [ -z "${GORELEASER_CURRENT_TAG}" ]; then
            echo "ERROR: GORELEASER_CURRENT_TAG is empty!"
            exit 1
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true 
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ env.GORELEASER_CURRENT_TAG }}

      - name: Login to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_TOKEN }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin

      - name: Publish Release Files
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Pulling image: docker.io/pellnetwork/intellix:${GORELEASER_CURRENT_TAG}"
          docker pull docker.io/pellnetwork/intellix:${GORELEASER_CURRENT_TAG}

          CONTAINER_ID=$(docker create docker.io/pellnetwork/intellix:${GORELEASER_CURRENT_TAG})
          docker cp $CONTAINER_ID:/usr/bin/intellix ./intellix-${NEW_VERSION}-linux-amd64
          docker rm $CONTAINER_ID

          sha256sum intellix-${NEW_VERSION}-linux-amd64 > checksums.txt

          mkdir -p release
          mv intellix-${NEW_VERSION}-linux-amd64 release/
          mv checksums.txt release/

          gh release upload "${GORELEASER_CURRENT_TAG}" release/*

     